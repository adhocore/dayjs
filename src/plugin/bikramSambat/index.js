import { FORMAT_DEFAULT, INVALID_DATE_STRING } from '../../constant'

export default (o, c) => {
  const proto = c.prototype
  proto.toBS = function (formatStr) {
    if (!this.isValid() || this.year() < 1944) return INVALID_DATE_STRING
    const str = formatStr || FORMAT_DEFAULT

    // Days since 1944-01-01
    let days = this.diff('1944-01-01', 'day')

    // Base conversion: 1944-01-01 AD = 2000-09-17 BS
    let YYYY = 2000
    let M = 9
    let D = 17

    // Day offsets for every months since 2000 BS
    const nDays = [
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 1, 2, 2, 1, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 1, 2, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 1, 2, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 3, 4, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 3, 4, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 4, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [2, 4, 3, 4, 3, 3, 1, 2, 2, 1, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 1, 2, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 1, 2, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 3, 4, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 4, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [2, 4, 3, 4, 3, 3, 1, 2, 1, 2, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 1, 2, 2, 1, 1, 3],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 1, 2, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 3],
      [3, 3, 3, 4, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 2, 1, 3],
      [3, 3, 3, 4, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 1, 2, 1, 2, 2],
      [3, 4, 3, 4, 3, 2, 2, 2, 1, 1, 2, 2],
      [3, 3, 4, 4, 3, 2, 2, 2, 1, 2, 2, 2],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 2, 2],
      [3, 3, 4, 3, 3, 2, 2, 2, 1, 2, 2, 2],
      [3, 3, 4, 3, 3, 2, 2, 2, 1, 2, 2, 2],
      [3, 4, 3, 4, 2, 3, 2, 2, 1, 2, 2, 2],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 2, 2],
      [3, 3, 4, 3, 3, 3, 2, 2, 1, 2, 2, 2],
      [2, 3, 4, 4, 2, 3, 2, 2, 1, 2, 2, 2],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 2, 2],
      [2, 4, 3, 4, 3, 2, 2, 2, 1, 2, 2, 2]
    ]

    for (; ; days -= 1, D += 1) {
      const max = 28 + nDays[YYYY - 2000][M - 1]
      if (D > max) {
        D = 1
        M += 1
      }
      if (M > 12) {
        M = 1
        YYYY += 1
      }

      if (days === 0) break
    }

    // Only year, month and date values are different than AD
    const matches = {
      YY: String(YYYY).slice(-2),
      YYYY: String(YYYY),
      M: String(M),
      MM: this.$utils().s(M, 2, '0'),
      MMM: 'वै_जे_आ_श्रा_भा_अ_का_म_पौ_मा_फा_चै'.split('_')[M - 1],
      MMMM: 'वैशाख_जेठ_आषाढ_श्रावण_भाद्र_असोज_कार्तिक_मङ्सिर_पौष_माघ_फाल्गुन_चैत्र'.split('_')[M - 1],
      D: String(D),
      DD: this.$utils().s(D, 2, '0')
    }

    return this.format(str.replace(/Y{2,4}|M{1,4}|D{1,2}/g, m => matches[m]))
  }
}
